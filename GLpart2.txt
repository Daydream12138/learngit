着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数
#version version_number
in type in_variable_name;
in type in_variable_name;

out type out_variable_name;

uniform type uniform_name;

int main()
{// 处理输入并进行一些图形操作
  ...
  // 输出处理过的结果到输出变量
  out_variable_name = weird_stuff_we_processed;}

顶点着色器和片段着色器的颜色输出
顶点：
#version 330 core
layout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0     此为顶点着色器的特殊点，额外标识layout()
out vec4 vertexColor; // 为片段着色器指定一个颜色输出
void main()
{   gl_Position = vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数
    vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // 把输出变量设置为暗红色}
片段：
#version 330 core
out vec4 FragColor;
in vec4 vertexColor; // 从顶点着色器传来的输入变量（名称相同、类型相同）
void main()
{    FragColor = vertexColor;}
关于向量 vecn是float型可满足大部分需求	vec.x/vec.y/vec.z/vec.w来获取四个分量
重组：拿原向量的分量组新向量(前提是原向量的分量存在)

uniform：全局性，任意性，稳定
因为uniform是全局变量，我们可以在任何着色器中定义它们，而无需通过顶点着色器作为中介。
如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量，导致最后编译出的版本中并不会包含它，这可能导致几个非常麻烦的错误，记住这点！！！！
#version 330 core
out vec4 FragColor;
uniform vec4 ourColor; // 在OpenGL程序代码中设定这个变量
void main()
{  FragColor = ourColor;}

float timeValue = glfwGetTime();//获取运行的秒数
float greenValue = (sin(timeValue) / 2.0f) + 0.5f;//sin函数让颜色在0.0到1.0之间改变，最后将结果储存到greenValue里
int vertexColorLocation = glGetUniformLocation(shaderProgram, "ourColor");查询uniform ourColor的位置值并赋值
glUseProgram(shaderProgram);
glUniform4f(vertexColorLocation, 0.0f, greenValue, 0.0f, 1.0f);//glUniform4f函数设置uniform值
查询uniform地址不要求你之前使用过着色器程序，但是更新一个uniform之前你必须先使用程序（调用glUseProgram)，因为它是在当前激活的着色器程序中设置uniform的。！！
